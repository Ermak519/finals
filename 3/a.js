/*
    отчет: https://contest.yandex.ru/contest/23815/run-report/111789320/

    Принцип работы:
        Инициализируются два указателя left и right.

        Вычисляем средний индекс текущего диапазона.
        Проверяем, равно ли значение в среднем индексе целевому значению k. Если да, возвращаем средний индекс.

        Проверяем, является ли значение в правом индексе больше значения в среднем индексе. 
            Если да, это означает, что правая половина массива отсортирована.

                Если целевое значение k больше значения в среднем индексе и меньше или равно значению в правом индексе, обновляем left на middle + 1, чтобы искать в правой половине массива.
                В противном случае обновляем right на middle - 1, чтобы искать в левой половине массива.

            Если значение в правом индексе не больше значения в среднем индексе, это означает, что левая половина массива отсортирована.

                Если целевое значение k больше или равно значению в левом индексе и меньше значения в среднем индексе, обновляем right на middle - 1, чтобы искать в левой половине массива.
                В противном случае обновляем left на middle + 1, чтобы искать в правой половине массива.

        Если целевое значение k не найдено в массиве, возвращаем -1.

        Пусть 
            n - количество элементов
            
            Временная сложность
                Выполнение программы 
                    область поиска уменьшается на каждой итерации в два раза
                Итоговое - O(log n)

            Пространственная сложность (доп. память)
                Выполнение программы - O(1) - необходимо хранить только указатели и индекс для среднего элемента
                Итоговое - O(1)
*/

function brokenSearch(arr, k) {
    let left = 0;
    let right = arr.length - 1;

    while (left <= right) {
        let middle = Math.floor((left + right) / 2);

        if (arr[middle] === k) return middle;

        if (arr[right] > arr[middle]) {
            if (arr[middle] < k && k <= arr[right]) {
                left = middle + 1;
            } else {
                right = middle - 1;
            }
        } else {
            if (arr[left] <= k && k < arr[middle]) {
                right = middle - 1;
            } else {
                left = middle + 1;
            }
        }
    }

    return -1;
}

function test() {
    const arr = [19, 21, 100, 101, 1, 4, 5, 7, 12];
    if (brokenSearch(arr, 5) !== 6) {
        console.error("WA");
    }
}

